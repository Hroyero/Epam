{
  "stats": {
    "suites": 1,
    "tests": 4,
    "passes": 4,
    "pending": 0,
    "failures": 0,
    "start": "2024-05-15T00:26:58.927Z",
    "end": "2024-05-15T00:26:58.943Z",
    "duration": 16,
    "testsRegistered": 4,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "217b5bba-aa2e-4902-b2c3-18254fd6a1a9",
      "title": "",
      "fullFile": "C:\\Users\\Ryzen\\Documents\\proyectos\\UNIT-TESTING\\test\\numbers-validator\\isNumberEven.spec.js",
      "file": "\\test\\numbers-validator\\isNumberEven.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "4a239e93-072c-4885-a094-b24e1a5bf2d8",
          "title": "isNumberEven positive test",
          "fullFile": "C:\\Users\\Ryzen\\Documents\\proyectos\\UNIT-TESTING\\test\\numbers-validator\\isNumberEven.spec.js",
          "file": "\\test\\numbers-validator\\isNumberEven.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"isNumberEven positive test\"",
              "fullTitle": "isNumberEven positive test \"before each\" hook in \"isNumberEven positive test\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = new NumbersValidator();",
              "err": {},
              "uuid": "7e1fa89d-c970-474f-95de-5bfad5b9d386",
              "parentUUID": "4a239e93-072c-4885-a094-b24e1a5bf2d8",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"isNumberEven positive test\"",
              "fullTitle": "isNumberEven positive test \"after each\" hook in \"isNumberEven positive test\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = null;",
              "err": {},
              "uuid": "21ae8aa9-2ba1-4a55-8d04-39094afcaf28",
              "parentUUID": "4a239e93-072c-4885-a094-b24e1a5bf2d8",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should check if a number is even",
              "fullTitle": "isNumberEven positive test should check if a number is even",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(validator.isNumberEven(4)).to.be.equal(true);\n    expect(validator.isNumberEven(3)).to.be.equal(false);\n    expect(() => validator.isNumberEven('4')).to.throw();",
              "err": {},
              "uuid": "2c47e532-1c80-41ad-98b5-098425d86fa3",
              "parentUUID": "4a239e93-072c-4885-a094-b24e1a5bf2d8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return an array of even numbers",
              "fullTitle": "isNumberEven positive test should return an array of even numbers",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const arrayOfNumbers = [1, 2, 3, 4, 5];\nconst arrayOfString = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\"];\nexpect(validator.getEvenNumbersFromArray(arrayOfNumbers)).to.include.members([2, 4]);\nexpect(() => validator.getEvenNumbersFromArray(arrayOfString)).to.throw();",
              "err": {},
              "uuid": "da079c51-b76f-4d64-a237-12b92326a763",
              "parentUUID": "4a239e93-072c-4885-a094-b24e1a5bf2d8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if all elements in an array are numbers",
              "fullTitle": "isNumberEven positive test should check if all elements in an array are numbers",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const arrayOfNumbers = [1, 2, 3, 4, 5];\nconst notArray = \"I am not an array\";\nexpect(validator.isAllNumbers(arrayOfNumbers)).to.be.equal(true);\nexpect(() => validator.isAllNumbers(notArray)).to.throw();",
              "err": {},
              "uuid": "8d8985af-934a-40c4-b5a4-f28bac4bb3e1",
              "parentUUID": "4a239e93-072c-4885-a094-b24e1a5bf2d8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if a value is an integer",
              "fullTitle": "isNumberEven positive test should check if a value is an integer",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(validator.isInteger(5)).to.be.equal(true);\nexpect(validator.isInteger(5.5)).to.be.equal(false);\nexpect(() => validator.isInteger(true)).to.throw();",
              "err": {},
              "uuid": "bc1f70df-77ea-437a-aea6-1f052d2f1d54",
              "parentUUID": "4a239e93-072c-4885-a094-b24e1a5bf2d8",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "2c47e532-1c80-41ad-98b5-098425d86fa3",
            "da079c51-b76f-4d64-a237-12b92326a763",
            "8d8985af-934a-40c4-b5a4-f28bac4bb3e1",
            "bc1f70df-77ea-437a-aea6-1f052d2f1d54"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 5,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.4.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}